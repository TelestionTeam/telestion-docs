<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="key_git_principles">
    <title>Key git principles</title>
    <shortdesc>Key principles for contributing to and maintaining the <ph
            conref="../../reusables/phrases.dita#phrases/ph_gxh_bcv_vnb"/> repository</shortdesc>
    <prolog>
        <author type="contributor">Pablo Klaschka</author>
        <critdates>
            <!--Pablo Klaschka-->
            <revised modified="2020-12-04"/>
            <!--Pablo Klaschka-->
            <revised modified="2021-01-28"/>
        </critdates>
    </prolog>
    <refbody>
        <section id="section_cln_43v_vnb">
            <title>The simple bare necessities</title>
            <dl>
                <dlentry>
                    <dt>Be kind!</dt>
                    <dd>Yes, it sounds silly, but it's probably the most important principle of them
                        all. Open-Source contributions are, in 99 % of the cases, side-projects.
                        Open-Source is a great principle and you can be proud to contribute to the
                        pool of open-source software. While this may be different in other
                        communities, you shouldn't use comments like <q>RTFM!</q> etc. in this
                        community.</dd>
                    <dd>Contributing to an open-source project is scary enough already: Your code
                        will be available for the world to see (and judge). But you do need and
                        should appreciate these contributions. Therefore, if the best you can do is
                        to post some discouraging comment about why something is <q>just bad</q>,
                        just keep it to yourself! Constructive criticism is great, but you should
                        always cobine it with explicit appreciation for the time the other person
                        has taken.<note>Online comments often get mis-intrepreted in the
                            worst-possible way (as it's, unfortuantely, also the safest way for the
                            person receiving them). Especially when they begin to cross culture and
                            language differences, this happens far sooner than you might think.
                            Please keep that in mind when writing comments.</note></dd>
                </dlentry>
                <dlentry>
                    <dt>Keep <varname>main</varname> instantly releasable</dt>
                    <dd><b>Always</b> keep the state of the <varname>main</varname> branch
                        releasable. As this project implements automation in such a way that
                            <cmdname>lerna</cmdname> automatically releases the correct kind of
                        semantic release on the press of a button (which, theoretically, anyone
                        should be able to press), pressing that buttons should result in a
                            <i>good</i> release, whenever it gets pressed.<note type="note">This
                            enables this project to release changes in no time, if needed or
                            wanted.</note></dd>
                </dlentry>
                <dlentry>
                    <dt>One branch per change</dt>
                    <dd>don't try to put more than one kind of change (bug fix, feature, â€¦) into a
                        single branch, except if explicitly adviced to do so by one of the
                        maintainers. This ensures the ability to correctly merge it with a
                        conventional commit message, should the need arise, and guarantees correct
                        generation of release notes and changelog in releases.</dd>
                </dlentry>
                <dlentry>
                    <dt>Use the conventional commit commit-name system</dt>
                    <dd>It lets this project generate release notes and the required semantic type
                        of release at the push of a button, without having to think about it
                        (sticking with the instantly releasable theme). Don't worry if you might do
                        something wrong. Even the "worst" of mistakes, a maintainer can fix. Either
                        when merging your Pull Request (by squashing the commits with a new commit
                        message) or in some other way.</dd>
                </dlentry>
                <dlentry>
                    <dt>Don't be afraid to ask</dt>
                    <dd>While everyone claims that JavaScript is easy compared to other languages
                        (that may or may not be the case), what this project uses is a rather
                        complex and large ecosystem with a lot of tooling, etc. While, at its core,
                        it's still "easy old JS," a lot might not be obvious, immediately. Always
                        feel free to ask about anything. If someone isn't kind in their response,
                        they don't belong into this project, and in 99 % of the cases, you'll get a
                        kind reply by someone else, anyway. Remember: You're not the first to feel
                        this way (and even the most experienced of developers sometimes have to ask
                        someone else to find out they've forgotten to hit
                            <uicontrol>Compile</uicontrol> ;))</dd>
                </dlentry>
            </dl>
        </section>
        <section id="section_vlr_njv_vnb">
            <title>Maintainer's tasks</title>
            <dl>
                <dlentry>
                    <dt>Make sure that all contributions are by contributors who have signed the
                        CLA</dt>
                    <dd>Otherwise, this project will get into a lot of legal trouble.<note
                            type="danger">If a Pull Request doesn't contain a filled checkbox or
                            other notice about the contributor having signed the NDA, <b>don't merge
                                it!</b>. If you suspect you might have made a mistake in this
                            regard, please talk to your team leader about it
                        immediately.</note></dd>
                </dlentry>
                <dlentry>
                    <dt>Make sure that every change has a conventional commit associated with
                        it</dt>
                    <dd>This enables automatic generation of the release notes and the next released
                        version. If a branch has valid and correct conventional commit messages, you
                        can just go ahead and merge it by rebasing it onto the <codeph>main</codeph>
                        branch. Otherwise, you may have to squash and merge using a valid
                        conventional commit message. In the end, the only thing that's important is
                        that every change that's relevant for the next type of version (for example,
                        a feature or a breaking change) or the next version's release notes has a
                        valid conventional commit for it in the <varname>main</varname> branch.<note
                            type="warning">Merge commits appear to not get used (to their full
                            extent). Therefore, if, for merging a Pull Request, you need a new
                            conventional commit message, use <uicontrol>Squash and
                            Merge</uicontrol></note><note type="tip">For some contributions, it just
                            isn't practical to have one mergeable branch per change. For example, a
                            refactoring might, in the process, also fix a lot of old issues. In that
                            case, you can sqash and merge using the "biggest" applicable
                            conventional commit (for example, <q>feat: Big Refactoring</q>), while
                            putting <q>Closes: #<varname>issue-number</varname></q> for every closed
                            issue into the commit's footer. Even though fixing a bug would,
                            originally, be a <codeph>fix</codeph>, the feature of an overall
                            refactoring (with possibly a few breaking changes) outweighs that and
                            fixing a bug is <i>just</i> a side-effect.</note></dd>
                </dlentry>
            </dl>
        </section>
    </refbody>
</reference>
